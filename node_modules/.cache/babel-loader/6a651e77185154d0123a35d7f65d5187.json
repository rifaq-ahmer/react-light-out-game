{"ast":null,"code":"import _slicedToArray from \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Technical-Stuff\\\\code\\\\github\\\\React\\\\01-React-Colt-Steel-Projects\\\\Light-out-game\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      var _this$props = this.props,\n          nRows = _this$props.nRows,\n          nCols = _this$props.nCols,\n          chanceLightStartsOn = _this$props.chanceLightStartsOn; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < nRows; y++) {\n        var row = [];\n\n        for (var x = 0; x < nCols; x++) {\n          row.push(Math.random() < chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(\"Flipping\", coord);\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = false;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          nRows = _this$props3.nRows,\n          nCols = _this$props3.nCols;\n      var board = this.state.board;\n      var tblBoard = [];\n\n      for (var y = 0; y < nRows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 18\n            }\n          }));\n        };\n\n        for (var x = 0; x < nCols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }\n        }, row));\n      } // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["D:/Technical-Stuff/code/github/React/01-React-Colt-Steel-Projects/Light-out-game/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","nRows","nCols","chanceLightStartsOn","y","row","x","push","Math","random","coord","console","log","ncols","nrows","split","map","Number","flipCell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows:5,\n    nCols:5,\n    chanceLightStartsOn:0.25\n\n  }\n\n  constructor(props) {\n    super(props);\n   // TODO: set initial state\n   this.state = {\n     hasWon :false,\n     board:this.createBoard()\n   }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = []; \n    const {nRows, nCols, chanceLightStartsOn} = this.props;\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < nRows; y++){\n      let row = [];\n      for (let x=0; x < nCols;x++){\n        row.push(Math.random() < chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"Flipping\",coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y,x)\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon= false\n\n    this.setState({board:board, hasWon:hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    const {nRows, nCols} = this.props;\n    const {board} =this.state;\n    let tblBoard = [];\n    for (let y = 0; y < nRows; y++){\n      let row = [];\n      for (let x=0; x < nCols;x++){\n        let coord = `${y}-${x}`\n        row.push(<Cell key={coord} isLit={board[y][x]} flipCellsAroundMe={()=> this.flipCellsAround(coord)}/>)\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    return (\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}